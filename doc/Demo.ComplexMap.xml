<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26">
<Class name="Demo.ComplexMap.Rule.SemesterBatchRouting">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeCreated>65460,79539.980493</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.MsgRouter.RoutingEngine" production="Demo.ComplexMap.SemesterProduction">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="source" value="Semester_Data_FileService"></constraint>
<constraint name="msgClass" value="Demo.ComplexMap.Semester.Batch"></constraint>
<when condition="1">
<send transform="" target="Semester_Data_FileOperation"></send>
<send transform="Demo.ComplexMap.Transform.SemesterBatchToSemesterSummaryBatch" target="Semester_Summary_FileOperation"></send>
<send transform="Demo.ComplexMap.Transform.SemesterBatchToFixedClassBatch" target="Semester_FixedClassBatch_FileOperation"></send>
<send transform="Demo.ComplexMap.Transform.SemesterBatchToFixedStudentBatch" target="Semester_FixedStudentBatch_FileOperation"></send>
<send transform="" target="Semester_FixedStudent_BatchCreator"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="Demo.ComplexMap.Semester.Batch">
<Description>
RECORDMAP: Modified during compilation of Complex RecordMap 'Demo.ComplexMap.Semester.SemesterData'
on 2013-01-14 at 13:28:31.377 [2013-01-14 18:28:31.378 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexBatch,Ens.Request</Super>
<TimeCreated>65460,79540.120909</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Property name="Semester">
<Type>Demo.ComplexMap.Semester.SemesterHeader.Record</Type>
<Required>1</Required>
</Property>

<Property name="Students">
<Type>Demo.ComplexMap.Semester.Students</Type>
<Collection>array</Collection>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMap.SemeD05B.BatchD</DataLocation>
<DefaultData>BatchDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMap.SemeD05B.BatchD</IdLocation>
<IndexLocation>^Demo.ComplexMap.SemeD05B.BatchI</IndexLocation>
<StreamLocation>^Demo.ComplexMap.SemeD05B.BatchS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="BatchDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Semester</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
</Data>
<Data name="Students">
<Attribute>Students</Attribute>
<Structure>subnode</Structure>
<Subscript>"Students"</Subscript>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.Semester.ClassInfo.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ComplexMap.Semester.ClassInfo'
on 2012-12-05 at 17:47:29.005 [2012-12-05 22:47:29.005 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexChild,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeCreated>65460,79543.775895</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="ClassIDIdx">
<Properties>ClassID</Properties>
</Index>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="ClassID">
<Type>%String</Type>
</Property>

<Property name="SectionID">
<Type>%String</Type>
</Property>

<Property name="Title">
<Type>%String</Type>
</Property>

<Property name="Grade">
<Type>%Integer</Type>
</Property>

<Trigger name="OnDelete">
<Code>	Set %ok = ##class(Demo.ComplexMap.Semester.ClassInfo.Record).%OnDelete($$$oidForm({ID})) If $$$ISERR(%ok) Quit</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMap.SemClsI.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMap.SemClsI.RecordD</IdLocation>
<IndexLocation>^Demo.ComplexMap.SemClsI.RecordI</IndexLocation>
<StreamLocation>^Demo.ComplexMap.SemClsI.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ClassID</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Title</Value>
</Value>
<Value name="5">
<Value>Grade</Value>
</Value>
<Value name="6">
<Value>SectionID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.Semester.ClassInfo">
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeCreated>65460,79540.195317</TimeCreated>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.Semester.ClassInfo" type="delimited" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.Semester.ClassInfo.Record" complexBatchManaged="1" label="CLS|" padFromLeft="0" recordTerminator="\x0d\x0a" allowEarlyTerminator="0">
  <Separators>
    <Separator>;</Separator>
  </Separators>
  <Field name="ClassID" required="0" datatype="%String" index="1"></Field>
  <Field name="SectionID" required="0" datatype="%String"></Field>
  <Field name="Title" required="0" datatype="%String"></Field>
  <Field name="Grade" required="0" datatype="%Integer"></Field>
</Record>
]]></Data>
</XData>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.ComplexMap.Semester.ClassInfo.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "CLS|" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, "")
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tSeps = $listbuild($char(59))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.ClassID = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.SectionID = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Title = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Grade =  pObject.GradeDisplayToLogical(tCurrString)
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write("CLS|",,.tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Do pStream.Write($select(pHasTopFields: ##class(Demo.ComplexMap.Semester.ClassInfo.Record).ClassIDLogicalToDisplay(pObject.ClassID), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.ClassInfo.Record).SectionIDLogicalToDisplay(pObject.SectionID), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.ClassInfo.Record).TitleLogicalToDisplay(pObject.Title), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.ClassInfo.Record).GradeLogicalToDisplay(pObject.Grade), 1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.ComplexMap.Semester.ClassInfo.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["CLS|"
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.Semester.SemesterData">
<Description>
Complex RecordMap to represent all the students and the classes they are enrolled in for a given semester.</Description>
<Super>EnsLib.RecordMap.ComplexMap</Super>
<TimeCreated>65460,79540.263519</TimeCreated>

<XData name="ComplexBatch">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<ComplexBatch xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.Semester.SemesterData" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.Semester.Batch">
  <Header name="Semester" recordMap="Demo.ComplexMap.Semester.SemesterHeader"></Header>
  <RecordSequence name="Students" required="1" repeating="1" minRepeats="1">
    <RecordReference name="Student" required="1" repeating="0" recordMap="Demo.ComplexMap.Semester.Student"></RecordReference>
    <RecordReference name="ClassInfo" required="1" repeating="1" minRepeats="1" recordMap="Demo.ComplexMap.Semester.ClassInfo"></RecordReference>
  </RecordSequence>
</ComplexBatch>
]]></Data>
</XData>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Method name="PutBatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIOStream:%IO.DeviceStream,pBatch:EnsLib.RecordMap.ComplexBatch</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If '$IsObject($get(pBatch)) Set tStatus = $$$ERROR($$$ObjectInstanceRequired) Quit
		If '$IsObject(pIOStream) {
			Set tFilename = pIOStream
			Set pIOStream = ##class(%IO.FileStream).%New()
			Do pIOStream.Open(tFilename,"WAE",,"UTF-8",.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tStatus = ##class(Demo.ComplexMap.Semester.SemesterHeader).PutObject(pIOStream,pBatch.Semester,0)
		If $$$ISERR(tStatus) Quit
		For i=1:1:pBatch.Students.Count() {
			Set tElement = pBatch.Students.GetAt(i)
			If $IsObject(tElement) {
				Set tStatus = tElement.PutSequence(pIOStream)
				If $$$ISERR(tStatus) Quit
			}
		}
		If $$$ISERR(tStatus) Quit
		Do pIOStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	} Catch ex {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetBatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIOStream:%IO.DeviceStream,pTimeout:%Numeric=-1,*pBatch:EnsLib.RecordMap.ComplexBatch</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If '$IsObject(pIOStream) {
			Set tFilename = pIOStream
			Set pIOStream = ##class(%IO.FileStream).%New()
			Do pIOStream.Open(tFilename,,pTimeout,"UTF-8",.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set pIOStream.CharEncoding = "UTF-8"
		Set pBatch = ##class(Demo.ComplexMap.Semester.Batch).%New()
		Set pBatch.%Source = pIOStream.Name
		Set tStatus = ##class(Demo.ComplexMap.Semester.SemesterHeader).GetObject(pIOStream,.tHeader,pTimeout)
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexBasic,"Semester","Demo.ComplexMap.Semester.SemesterHeader",$classname()),tStatus) Quit
		Set pBatch.Semester = tHeader
		Set tLookAhead = ""
		If (4 > $length(tLookAhead)) {
			Set tLookAhead = tLookAhead _ pIOStream.Read(4-$length(tLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexBasic,"Students","Demo.ComplexMap.Semester.Students",$classname()),tStatus) Quit
		}
		Set tCount = 0
		While ($extract(tLookAhead,1,4)="STU|") {
			Set tStatus = ..getSeqStudents(pIOStream,.tSequence,.tLookAhead,pBatch,pTimeout)
			Set tCount = tCount + 1
			If $$$ISERR(tStatus) Quit
			Set tStatus = pBatch.Students.SetAt(tSequence,tCount)
			If $$$ISERR(tStatus) Quit
			If (4 > $length(tLookAhead)) {
				Set tLookAhead = tLookAhead _ pIOStream.Read(4-$length(tLookAhead),pTimeout,.tStatus)
				If $$$ISERR(tStatus) Quit
			}
		}
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexRepeating,"Students","Demo.ComplexMap.Semester.Students",$classname(),tCount),tStatus) Quit
		If (1 > tCount) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrRepeatMin,1,"Students")
			Quit
		}
	} Catch {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="BATCHCLASS">
<Default>Demo.ComplexMap.Semester.Batch</Default>
</Parameter>

<Method name="getSeqStudents">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIOStream:%IO.DeviceStream,*pSequence:EnsLib.RecordMap.ComplexSequence,&pLookAhead:%String="",pBatch:EnsLib.RecordMap.ComplexBatch,pTimeout:%Numeric=-1]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		Set pSequence = ##class(Demo.ComplexMap.Semester.Students).%New()
		Set tStatus = ##class(Demo.ComplexMap.Semester.Student).GetObject(pIOStream,.tObject,pTimeout,.pLookAhead)
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexBasic,"Student","Demo.ComplexMap.Semester.Student",$classname()),tStatus) Quit
		Set pSequence.Student = tObject
		If (4 > $length(pLookAhead)) {
			Set pLookAhead = pIOStream.Read(4-$length(pLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tCount = 0
		While ($extract(pLookAhead,1,4) = "CLS|") {
			Set tStatus = ##class(Demo.ComplexMap.Semester.ClassInfo).GetObject(pIOStream,.tObject,pTimeout,.pLookAhead)
			Set tCount = tCount + 1
			If $$$ISERR(tStatus) Quit
			Set tStatus = pSequence.ClassInfo.SetAt(tObject,tCount)
			If $$$ISERR(tStatus) Quit
			Set pLookAhead = pIOStream.Read(4-$length(pLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexRepeating,"ClassInfo","Demo.ComplexMap.Semester.ClassInfo",$classname(),tCount),tStatus) Quit
		If (1 > tCount) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrRepeatMin,1,"ClassInfo")
			Quit
		}
	}
	Catch {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.Semester.SemesterHeader.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ComplexMap.Semester.SemesterHeader'
on 2012-12-05 at 17:06:05.014 [2012-12-05 22:06:05.014 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexChild,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeCreated>65460,79544.088965</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="SemesterIDIdx">
<Properties>SemesterID</Properties>
</Index>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="SemesterID">
<Type>%Integer</Type>
</Property>

<Property name="Year">
<Type>%Integer</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="NumWeeks">
<Type>%Integer</Type>
</Property>

<Trigger name="OnDelete">
<Code>	Set %ok = ##class(Demo.ComplexMap.Semester.SemesterHeader.Record).%OnDelete($$$oidForm({ID})) If $$$ISERR(%ok) Quit</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMap.Sem.SH.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMap.Sem.SH.RecordD</IdLocation>
<IndexLocation>^Demo.ComplexMap.Sem.SH.RecordI</IndexLocation>
<StreamLocation>^Demo.ComplexMap.Sem.SH.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SemesterID</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Name</Value>
</Value>
<Value name="5">
<Value>NumWeeks</Value>
</Value>
<Value name="6">
<Value>Year</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.Semester.SemesterHeader">
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeCreated>65460,79540.338635</TimeCreated>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.Semester.SemesterHeader" type="delimited" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.Semester.SemesterHeader.Record" complexBatchManaged="1" label="SEM|" padFromLeft="0" recordTerminator="\x0d\x0a" allowEarlyTerminator="0">
  <Separators>
    <Separator>;</Separator>
  </Separators>
  <Field name="SemesterID" required="0" repeating="0" datatype="%Integer" index="1"></Field>
  <Field name="Year" required="0" repeating="0" datatype="%Integer"></Field>
  <Field name="Name" required="0" repeating="0" datatype="%String"></Field>
  <Field name="NumWeeks" required="0" repeating="0" datatype="%Integer"></Field>
</Record>
]]></Data>
</XData>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.ComplexMap.Semester.SemesterHeader.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "SEM|" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, "")
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tSeps = $listbuild($char(59))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.SemesterID =  pObject.SemesterIDDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Year =  pObject.YearDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Name = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.NumWeeks =  pObject.NumWeeksDisplayToLogical(tCurrString)
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write("SEM|",,.tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Do pStream.Write($select(pHasTopFields: ##class(Demo.ComplexMap.Semester.SemesterHeader.Record).SemesterIDLogicalToDisplay(pObject.SemesterID), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.SemesterHeader.Record).YearLogicalToDisplay(pObject.Year), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.SemesterHeader.Record).NameLogicalToDisplay(pObject.Name), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.SemesterHeader.Record).NumWeeksLogicalToDisplay(pObject.NumWeeks), 1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.SemesterHeader.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["SEM|"
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.Semester.Student.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ComplexMap.Semester.Student'
on 2012-12-05 at 17:06:05.349 [2012-12-05 22:06:05.349 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexChild,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeCreated>65460,79544.405565</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="StudentIDIdx">
<Properties>StudentID</Properties>
</Index>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="StudentID">
<Type>%Integer</Type>
</Property>

<Property name="LastName">
<Type>%String</Type>
</Property>

<Property name="FirstName">
<Type>%String</Type>
</Property>

<Property name="MiddleName">
<Type>%String</Type>
</Property>

<Property name="Grade">
<Type>%Integer</Type>
</Property>

<Property name="Email">
<Type>%String</Type>
</Property>

<Property name="Phone">
<Type>%String</Type>
</Property>

<Trigger name="OnDelete">
<Code>	Set %ok = ##class(Demo.ComplexMap.Semester.Student.Record).%OnDelete($$$oidForm({ID})) If $$$ISERR(%ok) Quit</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMap.SemStud.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMap.SemStud.RecordD</IdLocation>
<IndexLocation>^Demo.ComplexMap.SemStud.RecordI</IndexLocation>
<StreamLocation>^Demo.ComplexMap.SemStud.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StudentID</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>FirstName</Value>
</Value>
<Value name="5">
<Value>MiddleName</Value>
</Value>
<Value name="6">
<Value>Grade</Value>
</Value>
<Value name="7">
<Value>Email</Value>
</Value>
<Value name="8">
<Value>Phone</Value>
</Value>
<Value name="9">
<Value>LastName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.Semester.Student">
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeCreated>65460,79540.414787</TimeCreated>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.Semester.Student" type="delimited" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.Semester.Student.Record" complexBatchManaged="1" label="STU|" padFromLeft="0" recordTerminator="\x0d\x0a" allowEarlyTerminator="0">
  <Separators>
    <Separator>;</Separator>
  </Separators>
  <Field name="StudentID" required="0" repeating="0" datatype="%Integer" index="1"></Field>
  <Field name="LastName" required="0" repeating="0" datatype="%String"></Field>
  <Field name="FirstName" required="0" repeating="0" datatype="%String"></Field>
  <Field name="MiddleName" required="0" repeating="0" datatype="%String"></Field>
  <Field name="Grade" required="0" repeating="0" datatype="%Integer"></Field>
  <Field name="Email" required="0" repeating="0" datatype="%String"></Field>
  <Field name="Phone" required="0" repeating="0" datatype="%String"></Field>
</Record>
]]></Data>
</XData>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.ComplexMap.Semester.Student.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "STU|" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, "")
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tSeps = $listbuild($char(59))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.StudentID =  pObject.StudentIDDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.LastName = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.FirstName = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.MiddleName = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Grade =  pObject.GradeDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Email = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Phone = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write("STU|",,.tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Do pStream.Write($select(pHasTopFields: ##class(Demo.ComplexMap.Semester.Student.Record).StudentIDLogicalToDisplay(pObject.StudentID), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.Student.Record).LastNameLogicalToDisplay(pObject.LastName), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.Student.Record).FirstNameLogicalToDisplay(pObject.FirstName), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.Student.Record).MiddleNameLogicalToDisplay(pObject.MiddleName), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.Student.Record).GradeLogicalToDisplay(pObject.Grade), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.Student.Record).EmailLogicalToDisplay(pObject.Email), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Semester.Student.Record).PhoneLogicalToDisplay(pObject.Phone), 1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.ComplexMap.Semester.Student.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["STU|"
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.Semester.Students">
<Description>
RECORDMAP: Modified during compilation of Complex RecordMap 'Demo.ComplexMap.Semester.SemesterData'
on 2013-01-14 at 13:28:31.441 [2013-01-14 18:28:31.441 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexSequence,%XML.Adaptor</Super>
<TimeCreated>65460,79540.493392</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Property name="Student">
<Type>Demo.ComplexMap.Semester.Student.Record</Type>
<Required>1</Required>
</Property>

<Property name="ClassInfo">
<Type>Demo.ComplexMap.Semester.ClassInfo.Record</Type>
<Collection>array</Collection>
<Required>1</Required>
</Property>

<Method name="PutSequence">
<FormalSpec>pIOStream:%IO.DeviceStream</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If $IsObject(..Student) {
			Set tStatus = ##class(Demo.ComplexMap.Semester.Student).PutObject(pIOStream,..Student,0)
			If $$$ISERR(tStatus) Quit
		}
		For i=1:1:..ClassInfo.Count() {
			Set tElement = ..ClassInfo.GetAt(i)
			If $IsObject(tElement) {
				Set tStatus = ##class(Demo.ComplexMap.Semester.ClassInfo).PutObject(pIOStream,tElement,0)
				If $$$ISERR(tStatus) Quit
			}
			Set tStatus = ..ClassInfo.%UnSwizzleAt(i)
			If $$$ISERR(tStatus) Quit
		}
		If $$$ISERR(tStatus) Quit
	}
	Catch {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Trigger name="OnDeleteTrigger">
<Code>	Set %ok = ##class(Demo.ComplexMap.Semester.Students).%OnDelete($$$oidForm({ID}))</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMap.SD05B.StudentsD</DataLocation>
<DefaultData>StudentsDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMap.SD05B.StudentsD</IdLocation>
<IndexLocation>^Demo.ComplexMap.SD05B.StudentsI</IndexLocation>
<StreamLocation>^Demo.ComplexMap.SD05B.StudentsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ClassInfo">
<Attribute>ClassInfo</Attribute>
<Structure>subnode</Structure>
<Subscript>"ClassInfo"</Subscript>
</Data>
<Data name="StudentsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Student</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.SemesterData">
<TimeCreated>65460,79530.36238</TimeCreated>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.ClassBatch">
<Description>
RECORDMAP: Modified during compilation of Complex RecordMap 'Demo.ComplexMap.SemesterFixed.ClassMap'
on 2012-12-06 at 17:59:50.300 [2012-12-06 22:59:50.300 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexBatch,Ens.Request</Super>
<TimeCreated>65460,79540.573657</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Property name="Semester">
<Type>Demo.ComplexMap.SemesterFixed.Semester.Record</Type>
<Required>1</Required>
</Property>

<Property name="Classes">
<Type>Demo.ComplexMap.SemesterFixed.ClassInfo.Record</Type>
<Collection>array</Collection>
<Parameter name="MINREPEATS" value="1"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMapSFix.ClassBatchD</DataLocation>
<DefaultData>ClassBatchDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMapSFix.ClassBatchD</IdLocation>
<IndexLocation>^Demo.ComplexMapSFix.ClassBatchI</IndexLocation>
<StreamLocation>^Demo.ComplexMapSFix.ClassBatchS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="ClassBatchDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Semester</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
</Data>
<Data name="Classes">
<Attribute>Classes</Attribute>
<Structure>subnode</Structure>
<Subscript>"Classes"</Subscript>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.ClassInfo.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ComplexMap.SemesterFixed.ClassInfo'
on 2012-12-06 at 17:59:13.223 [2012-12-06 22:59:13.223 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexChild,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeCreated>65460,79544.737008</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="ClassIDIdx">
<Properties>ClassID</Properties>
</Index>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="ClassID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="15"/>
</Property>

<Property name="SectionID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="Title">
<Type>%String</Type>
<Parameter name="MAXLEN" value="40"/>
</Property>

<Property name="Grade">
<Type>%String</Type>
<Parameter name="MAXLEN" value="3"/>
</Property>

<Property name="StudentCount">
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="999"/>
</Property>

<Trigger name="OnDelete">
<Code>	Set %ok = ##class(Demo.ComplexMap.SemesterFixed.ClassInfo.Record).%OnDelete($$$oidForm({ID})) If $$$ISERR(%ok) Quit</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMap.SemFix.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMap.SemFix.RecordD</IdLocation>
<IndexLocation>^Demo.ComplexMap.SemFix.RecordI</IndexLocation>
<StreamLocation>^Demo.ComplexMap.SemFix.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ClassID</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Title</Value>
</Value>
<Value name="5">
<Value>Grade</Value>
</Value>
<Value name="6">
<Value>StudentCount</Value>
</Value>
<Value name="7">
<Value>SectionID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.ClassInfo">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'Demo.ComplexMap.SemesterFixed.ClassInfo'
on 2015-10-29 at 10:48:06.106 [2015-10-29 15:48:06.106 UTC]
by user UnknownUser</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeCreated>65460,79540.650503</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.ComplexMap.SemesterFixed.ClassInfo.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "CLS|" } 
	Set tMaxLen = 73 + $length(tRecLabel)
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, tMaxLen, pTimeout, $char(13,10), tRecLabel, .pLookAhead, .tExtra)
	If $$$ISERR(tStatus) Quit tStatus
	Set pLookAhead = $get(tExtra)
	Set tIgnoreEarlyTerminator = 0
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tCurrPos = 1
	Set tNewChunk = 1
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,15,"","","ClassID",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.ClassID = pObject.ClassIDDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,10,"","","SectionID",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.SectionID = pObject.SectionIDDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,40,"","","Title",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.Title = pObject.TitleDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,5,"","","Grade",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.Grade = pObject.GradeDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,3,"","","StudentCount",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.StudentCount = pObject.StudentCountDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write("CLS|",,.tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.ClassInfo.Record).ClassIDLogicalToDisplay(pObject.ClassID), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 15 > tLen {
		Set tPadding = $get(pPadArray(15 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (15 - tLen + 1)) = ""
			Set pPadArray(15-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.ClassInfo.Record).SectionIDLogicalToDisplay(pObject.SectionID), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 10 > tLen {
		Set tPadding = $get(pPadArray(10 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (10 - tLen + 1)) = ""
			Set pPadArray(10-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.ClassInfo.Record).TitleLogicalToDisplay(pObject.Title), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 40 > tLen {
		Set tPadding = $get(pPadArray(40 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (40 - tLen + 1)) = ""
			Set pPadArray(40-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.ClassInfo.Record).GradeLogicalToDisplay(pObject.Grade), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 5 > tLen {
		Set tPadding = $get(pPadArray(5 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (5 - tLen + 1)) = ""
			Set pPadArray(5-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.ClassInfo.Record).StudentCountLogicalToDisplay(pObject.StudentCount), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 3 > tLen {
		Set tPadding = $get(pPadArray(3 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (3 - tLen + 1)) = ""
			Set pPadArray(3-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.ComplexMap.SemesterFixed.ClassInfo.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["CLS|"
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["fixedwidth"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.SemesterFixed.ClassInfo" type="fixedwidth" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.SemesterFixed.ClassInfo.Record" complexBatchManaged="1" label="CLS|" paddingChars="\x20" padFromLeft="0" recordTerminator="\x0d\x0a" allowEarlyTerminator="0">
  <Field name="ClassID" required="0" datatype="%String" width="15" index="1">
  </Field>
  <Field name="SectionID" required="0" datatype="%String" width="10">
  </Field>
  <Field name="Title" required="0" datatype="%String" width="40">
  </Field>
  <Field name="Grade" required="0" datatype="%String" width="5" repeating="0">
  </Field>
  <Field name="StudentCount" required="0" datatype="%Integer" width="3">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.ClassMap">
<Super>EnsLib.RecordMap.ComplexMap</Super>
<TimeCreated>65460,79540.713381</TimeCreated>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<XData name="ComplexBatch">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<ComplexBatch xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.SemesterFixed.ClassMap" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.SemesterFixed.ClassBatch">
  <Header name="Semester" recordMap="Demo.ComplexMap.SemesterFixed.Semester"></Header>
  <RecordReference name="Classes" required="0" repeating="1" minRepeats="1" recordMap="Demo.ComplexMap.SemesterFixed.ClassInfo"></RecordReference>
</ComplexBatch>
]]></Data>
</XData>

<Parameter name="BATCHCLASS">
<Default>Demo.ComplexMap.SemesterFixed.ClassBatch</Default>
</Parameter>

<Method name="PutBatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIOStream:%IO.DeviceStream,pBatch:EnsLib.RecordMap.ComplexBatch</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If '$IsObject($get(pBatch)) Set tStatus = $$$ERROR($$$ObjectInstanceRequired) Quit
		If '$IsObject(pIOStream) {
			Set tFilename = pIOStream
			Set pIOStream = ##class(%IO.FileStream).%New()
			Do pIOStream.Open(tFilename,"WAE",,"UTF-8",.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tStatus = ##class(Demo.ComplexMap.SemesterFixed.Semester).PutObject(pIOStream,pBatch.Semester,0)
		If $$$ISERR(tStatus) Quit
		For i=1:1:pBatch.Classes.Count() {
			Set tElement = pBatch.Classes.GetAt(i)
			If $IsObject(tElement) {
				Set tStatus = ##class(Demo.ComplexMap.SemesterFixed.ClassInfo).PutObject(pIOStream,tElement,0)
				If $$$ISERR(tStatus) Quit
			}
		}
		If $$$ISERR(tStatus) Quit
		Do pIOStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	} Catch ex {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetBatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIOStream:%IO.DeviceStream,pTimeout:%Numeric=-1,*pBatch:EnsLib.RecordMap.ComplexBatch</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If '$IsObject(pIOStream) {
			Set tFilename = pIOStream
			Set pIOStream = ##class(%IO.FileStream).%New()
			Do pIOStream.Open(tFilename,,pTimeout,"UTF-8",.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set pIOStream.CharEncoding = "UTF-8"
		Set pBatch = ##class(Demo.ComplexMap.SemesterFixed.ClassBatch).%New()
		Set pBatch.%Source = pIOStream.Name
		Set tStatus = ##class(Demo.ComplexMap.SemesterFixed.Semester).GetObject(pIOStream,.tHeader,pTimeout)
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexBasic,"Semester","Demo.ComplexMap.SemesterFixed.Semester",$classname()),tStatus) Quit
		Set pBatch.Semester = tHeader
		Set tLookAhead = ""
		If (4 > $length(tLookAhead)) {
			Set tLookAhead = pIOStream.Read(4-$length(tLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tCount = 0
		While ($extract(tLookAhead,1,4) = "CLS|") {
			Set tStatus = ##class(Demo.ComplexMap.SemesterFixed.ClassInfo).GetObject(pIOStream,.tObject,pTimeout,.tLookAhead)
			Set tCount = tCount + 1
			If $$$ISERR(tStatus) Quit
			Set tStatus = pBatch.Classes.SetAt(tObject,tCount)
			If $$$ISERR(tStatus) Quit
			Set tLookAhead = pIOStream.Read(4-$length(tLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexRepeating,"Classes","Demo.ComplexMap.SemesterFixed.ClassInfo",$classname(),tCount),tStatus) Quit
		If (1 > tCount) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrRepeatMin,1,"Classes")
			Quit
		}
	} Catch {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.Semester.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ComplexMap.SemesterFixed.Semester'
on 2012-12-06 at 17:55:25.784 [2012-12-06 22:55:25.784 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexChild,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeCreated>65460,79545.059182</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="SemesterIDIdx">
<Properties>SemesterID</Properties>
</Index>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="SemesterID">
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="9999"/>
</Property>

<Property name="Year">
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="9999"/>
</Property>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="NumWeeks">
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="99"/>
</Property>

<Property name="RecordCount">
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="99999"/>
</Property>

<Trigger name="OnDelete">
<Code>	Set %ok = ##class(Demo.ComplexMap.SemesterFixed.Semester.Record).%OnDelete($$$oidForm({ID})) If $$$ISERR(%ok) Quit</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexSFix.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.ComplexSFix.RecordD</IdLocation>
<IndexLocation>^Demo.ComplexSFix.RecordI</IndexLocation>
<StreamLocation>^Demo.ComplexSFix.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SemesterID</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Name</Value>
</Value>
<Value name="5">
<Value>NumWeeks</Value>
</Value>
<Value name="6">
<Value>RecordCount</Value>
</Value>
<Value name="7">
<Value>Year</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.Semester">
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeCreated>65460,79540.788187</TimeCreated>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.SemesterFixed.Semester" type="fixedwidth" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.SemesterFixed.Semester.Record" complexBatchManaged="1" label="SEM|" paddingChars="\x20" padFromLeft="0" recordTerminator="\x0d\x0a" allowEarlyTerminator="0">
  <Field name="SemesterID" required="0" datatype="%Integer" width="4" index="1"></Field>
  <Field name="Year" required="0" datatype="%Integer" width="4"></Field>
  <Field name="Name" required="0" datatype="%String" width="10"></Field>
  <Field name="NumWeeks" required="0" datatype="%Integer" width="2"></Field>
  <Field name="RecordCount" required="0" datatype="%Integer" width="5"></Field>
</Record>
]]></Data>
</XData>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.ComplexMap.SemesterFixed.Semester.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "SEM|" } 
	Set tMaxLen = 25 + $length(tRecLabel)
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, tMaxLen, pTimeout, $char(13,10), tRecLabel, .pLookAhead, .tExtra)
	If $$$ISERR(tStatus) Quit tStatus
	Set pLookAhead = $get(tExtra)
	Set tIgnoreEarlyTerminator = 0
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tCurrPos = 1
	Set tNewChunk = 1
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,4,"","","SemesterID",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.SemesterID = pObject.SemesterIDDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,4,"","","Year",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.Year = pObject.YearDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,10,"","","Name",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.Name = pObject.NameDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,2,"","","NumWeeks",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.NumWeeks = pObject.NumWeeksDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,5,"","","RecordCount",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.RecordCount = pObject.RecordCountDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write("SEM|",,.tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Semester.Record).SemesterIDLogicalToDisplay(pObject.SemesterID), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 4 > tLen {
		Set tPadding = $get(pPadArray(4 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (4 - tLen + 1)) = ""
			Set pPadArray(4-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Semester.Record).YearLogicalToDisplay(pObject.Year), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 4 > tLen {
		Set tPadding = $get(pPadArray(4 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (4 - tLen + 1)) = ""
			Set pPadArray(4-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Semester.Record).NameLogicalToDisplay(pObject.Name), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 10 > tLen {
		Set tPadding = $get(pPadArray(10 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (10 - tLen + 1)) = ""
			Set pPadArray(10-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Semester.Record).NumWeeksLogicalToDisplay(pObject.NumWeeks), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 2 > tLen {
		Set tPadding = $get(pPadArray(2 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (2 - tLen + 1)) = ""
			Set pPadArray(2-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Semester.Record).RecordCountLogicalToDisplay(pObject.RecordCount), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 5 > tLen {
		Set tPadding = $get(pPadArray(5 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (5 - tLen + 1)) = ""
			Set pPadArray(5-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.ComplexMap.SemesterFixed.Semester.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["SEM|"
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["fixedwidth"
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.Student.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ComplexMap.SemesterFixed.Student'
on 2012-12-06 at 17:46:52.455 [2012-12-06 22:46:52.455 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexChild,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeCreated>65460,79545.390107</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="StudentIDIdx">
<Properties>StudentID</Properties>
</Index>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="StudentID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="9"/>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="25"/>
</Property>

<Property name="FirstName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="MiddleName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="Grade">
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="99"/>
</Property>

<Property name="Email">
<Type>%String</Type>
<Parameter name="MAXLEN" value="40"/>
</Property>

<Property name="Phone">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Trigger name="OnDelete">
<Code>	Set %ok = ##class(Demo.ComplexMap.SemesterFixed.Student.Record).%OnDelete($$$oidForm({ID})) If $$$ISERR(%ok) Quit</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexSFix.StuRecD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.ComplexSFix.StuRecD</IdLocation>
<IndexLocation>^Demo.ComplexSFix.StuRecI</IndexLocation>
<StreamLocation>^Demo.ComplexSFix.StuRecS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StudentID</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>FirstName</Value>
</Value>
<Value name="5">
<Value>MiddleName</Value>
</Value>
<Value name="6">
<Value>Grade</Value>
</Value>
<Value name="7">
<Value>Email</Value>
</Value>
<Value name="8">
<Value>Phone</Value>
</Value>
<Value name="9">
<Value>LastName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.Student">
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeCreated>65460,79540.866222</TimeCreated>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.SemesterFixed.Student" type="fixedwidth" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.SemesterFixed.Student.Record" complexBatchManaged="1" label="STU|" paddingChars="\x20" padFromLeft="0" recordTerminator="\x0d\x0a" allowEarlyTerminator="0">
  <Field name="StudentID" required="0" datatype="%String" width="9" index="1"></Field>
  <Field name="LastName" required="0" datatype="%String" width="25"></Field>
  <Field name="FirstName" required="0" datatype="%String" width="20"></Field>
  <Field name="MiddleName" required="0" datatype="%String" width="20"></Field>
  <Field name="Grade" required="0" datatype="%Integer" width="2"></Field>
  <Field name="Email" required="0" datatype="%String" width="40"></Field>
  <Field name="Phone" required="0" datatype="%String" width="20"></Field>
</Record>
]]></Data>
</XData>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.ComplexMap.SemesterFixed.Student.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "STU|" } 
	Set tMaxLen = 136 + $length(tRecLabel)
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, tMaxLen, pTimeout, $char(13,10), tRecLabel, .pLookAhead, .tExtra)
	If $$$ISERR(tStatus) Quit tStatus
	Set pLookAhead = $get(tExtra)
	Set tIgnoreEarlyTerminator = 0
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tCurrPos = 1
	Set tNewChunk = 1
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,9,"","","StudentID",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.StudentID = pObject.StudentIDDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,25,"","","LastName",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.LastName = pObject.LastNameDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,20,"","","FirstName",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.FirstName = pObject.FirstNameDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,20,"","","MiddleName",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.MiddleName = pObject.MiddleNameDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,2,"","","Grade",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.Grade = pObject.GradeDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,40,"","","Email",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.Email = pObject.EmailDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Set tCurrVal = ..checkFixedWidthChunk(.tStatus,.tNewChunk,.tCurrChunk,.tRecordData,.tCurrString,.tCurrLen,.tCurrPos,20,"","","Phone",tIgnoreEarlyTerminator)
	If $$$ISERR(tStatus) Quit tStatus
	If pGetTopFields Set pObject.Phone = pObject.PhoneDisplayToLogical($ZStrip(tCurrVal, ">", $char(32)))
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write("STU|",,.tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Student.Record).StudentIDLogicalToDisplay(pObject.StudentID), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 9 > tLen {
		Set tPadding = $get(pPadArray(9 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (9 - tLen + 1)) = ""
			Set pPadArray(9-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Student.Record).LastNameLogicalToDisplay(pObject.LastName), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 25 > tLen {
		Set tPadding = $get(pPadArray(25 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (25 - tLen + 1)) = ""
			Set pPadArray(25-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Student.Record).FirstNameLogicalToDisplay(pObject.FirstName), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 20 > tLen {
		Set tPadding = $get(pPadArray(20 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (20 - tLen + 1)) = ""
			Set pPadArray(20-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Student.Record).MiddleNameLogicalToDisplay(pObject.MiddleName), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 20 > tLen {
		Set tPadding = $get(pPadArray(20 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (20 - tLen + 1)) = ""
			Set pPadArray(20-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Student.Record).GradeLogicalToDisplay(pObject.Grade), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 2 > tLen {
		Set tPadding = $get(pPadArray(2 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (2 - tLen + 1)) = ""
			Set pPadArray(2-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Student.Record).EmailLogicalToDisplay(pObject.Email), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 40 > tLen {
		Set tPadding = $get(pPadArray(40 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (40 - tLen + 1)) = ""
			Set pPadArray(40-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	If pHasTopFields { Set tValue = ##class(Demo.ComplexMap.SemesterFixed.Student.Record).PhoneLogicalToDisplay(pObject.Phone), tLen = $length(tValue) }
	Else { Set tValue = "", tLen = 0}
	If 20 > tLen {
		Set tPadding = $get(pPadArray(20 - tLen))
		If tPadding = "" {
			Set $piece(tPadding, $char(32), (20 - tLen + 1)) = ""
			Set pPadArray(20-tLen) = tPadding
		}
		Set tValue = tValue_tPadding
	}
	Do pStream.Write(tValue, 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.ComplexMap.SemesterFixed.Student.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["STU|"
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["fixedwidth"
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.StudentBatch">
<Description>
RECORDMAP: Modified during compilation of Complex RecordMap 'Demo.ComplexMap.SemesterFixed.StudentMap'
on 2012-12-06 at 18:01:20.705 [2012-12-06 23:01:20.705 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexBatch,Ens.Request</Super>
<TimeCreated>65460,79540.942402</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Property name="Semester">
<Type>Demo.ComplexMap.SemesterFixed.Semester.Record</Type>
<Required>1</Required>
</Property>

<Property name="Students">
<Type>Demo.ComplexMap.SemesterFixed.Student.Record</Type>
<Collection>array</Collection>
<Parameter name="MINREPEATS" value="1"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexSFix.StudentBatchD</DataLocation>
<DefaultData>StudentBatchDefaultData</DefaultData>
<IdLocation>^Demo.ComplexSFix.StudentBatchD</IdLocation>
<IndexLocation>^Demo.ComplexSFix.StudentBatchI</IndexLocation>
<StreamLocation>^Demo.ComplexSFix.StudentBatchS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="StudentBatchDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Semester</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
</Data>
<Data name="Students">
<Attribute>Students</Attribute>
<Structure>subnode</Structure>
<Subscript>"Students"</Subscript>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.StudentBatchProcess.Context">
<Description>
This class is generated by the Demo.ComplexMap.SemesterFixed.StudentBatchProcess BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>Demo.ComplexMap.SemesterFixed.StudentBatchProcess</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeCreated>65460,79712.490574</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="Key">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SourceStudent">
<Type>Demo.ComplexMap.Semester.Student.Record</Type>
</Property>

<Property name="StudentBatch">
<Type>Demo.ComplexMap.SemesterFixed.StudentBatch</Type>
</Property>

<Property name="TargetStudent">
<Type>Demo.ComplexMap.SemesterFixed.Student.Record</Type>
</Property>

<Property name="TempStudents">
<Type>Demo.ComplexMap.Semester.Students</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>initvalue</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '$IsObject(..StudentBatchNewObject()) Quit %objlasterror
	Quit ##super(initvalue)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>Key</Value>
</Value>
<Value name="2">
<Value>SourceStudent</Value>
</Value>
<Value name="3">
<Value>StudentBatch</Value>
</Value>
<Value name="4">
<Value>TargetStudent</Value>
</Value>
<Value name="5">
<Value>TempStudents</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.StudentBatchProcess.Thread1">
<Description>
This class is generated by the Demo.ComplexMap.SemesterFixed.StudentBatchProcess BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>Demo.ComplexMap.SemesterFixed.StudentBatchProcess</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeCreated>65460,79712.491737</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.StudentBatch.%Source")
 Set status=$$$OK,context.StudentBatch.%Source=request.%Source
 If $$$ISERR(status) Quit
 Set iscTemp=context.StudentBatch.Semester
 Set status=$classmethod("Demo.ComplexMap.Transform.SemesterToFixedSemester","Transform",request.Semester,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.StudentBatch.Semester=iscTemp
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.StudentBatch.Semester.RecordCount")
 Set status=$$$OK,context.StudentBatch.Semester.RecordCount=request.Students.Count()
 If $$$ISERR(status) Quit
 Set context.Key="",..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set context.Key=request.Students.Next(context.Key)
 If context.Key="" {
  Set ..%NextState="S4"
 } else {
  Set ..%NextState="S3"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.TempStudents=request.Students.GetAt(context.Key)
 If $$$ISERR(status) Quit
 If ($IsObject(context.TempStudents)) {
 Set ..%NextState="S6"
 } else {
 Set ..%NextState="S5"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Send StudentBatch ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.ComplexMap.SemesterFixed.StudentBatch).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.StudentBatch
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("",process.BatchOperation,callrequest,"Send StudentBatch",1,0,"Send StudentBatch",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Send StudentBatch ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Send StudentBatch") Do ..%PendingResponses.SetAt("","Send StudentBatch")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S8"
 } else {
    Set ..%NextState="S7",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.SourceStudent=context.TempStudents.Student
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.TargetStudent=##class(Demo.ComplexMap.SemesterFixed.Student.Record).%New()
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.TargetStudent.StudentID")
 Set status=$$$OK,context.TargetStudent.StudentID=context.SourceStudent.StudentID
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.TargetStudent.LastName")
 Set status=$$$OK,context.TargetStudent.LastName=context.SourceStudent.LastName
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.TargetStudent.FirstName")
 Set status=$$$OK,context.TargetStudent.FirstName=context.SourceStudent.FirstName
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.TargetStudent.MiddleName")
 Set status=$$$OK,context.TargetStudent.MiddleName=context.SourceStudent.MiddleName
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.TargetStudent.Grade")
 Set status=$$$OK,context.TargetStudent.Grade=context.SourceStudent.Grade
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.TargetStudent.Email")
 Set status=$$$OK,context.TargetStudent.Email=context.SourceStudent.Email
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.TargetStudent.Phone")
 Set status=$$$OK,context.TargetStudent.Phone=context.SourceStudent.Phone
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(context,"context.StudentBatch.Students")
 Set status=context.StudentBatch.Students.SetAt(context.TargetStudent,context.Key)
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.TargetStudent=""
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.SourceStudent=""
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.TempStudents=""
 If $$$ISERR(status) Quit
 Set status=$$$OK,status=request.Students.%UnSwizzleAt(context.Key)
 If $$$ISERR(status) Quit
 Set ..%NextState="S5"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S8"
 } else {
    Set ..%NextState="S7",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.StudentBatchProcess">
<Description>
Business Process that constructs a Demo.ComplexMap.SemesterFixed.StudentBatch based on an incoming Demo.ComplexMap.Semester.Batch, and sends it on to a file output operation.</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeCreated>65460,79541.030921</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='Demo.ComplexMap.Semester.Batch' response='Ens.Response' height='2250' width='2000' >
<context>
<property name='StudentBatch' type='Demo.ComplexMap.SemesterFixed.StudentBatch' instantiate='1' >
</property>
<property name='SourceStudent' type='Demo.ComplexMap.Semester.Student.Record' instantiate='0' >
</property>
<property name='TargetStudent' type='Demo.ComplexMap.SemesterFixed.Student.Record' instantiate='0' >
</property>
<property name='Key' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='TempStudents' type='Demo.ComplexMap.Semester.Students' instantiate='0' >
</property>
</context>
<sequence xend='200' yend='750' >
<assign name="Copy %Source" property="context.StudentBatch.%Source" value="request.%Source" action="set" xpos='200' ypos='250' />
<transform name='Transform Semester Header' class='Demo.ComplexMap.Transform.SemesterToFixedSemester' source='request.Semester' target='context.StudentBatch.Semester' xpos='200' ypos='350' />
<assign name="Set RecordCount" property="context.StudentBatch.Semester.RecordCount" value="request.Students.Count()" action="set" xpos='200' ypos='450' />
<foreach name='For each Student' property='request.Students' key='context.Key' xpos='200' ypos='550' xend='200' yend='2000' >
<assign name="Get Students from request" property="context.TempStudents" value="request.Students.GetAt(context.Key)" action="set" xpos='200' ypos='250' />
<if name='TempStudents' condition='$IsObject(context.TempStudents)' xpos='200' ypos='350' xend='200' yend='1900' >
<true>
<assign name="Get actual Student" property="context.SourceStudent" value="context.TempStudents.Student" action="set" xpos='335' ypos='500' />
<assign name="Create TargetStudent" property="context.TargetStudent" value="##class(Demo.ComplexMap.SemesterFixed.Student.Record).%New()" action="set" xpos='335' ypos='600' />
<assign name="Set StudentID" property="context.TargetStudent.StudentID" value="context.SourceStudent.StudentID" action="set" xpos='335' ypos='700' />
<assign name="Set LastName" property="context.TargetStudent.LastName" value="context.SourceStudent.LastName" action="set" xpos='335' ypos='800' />
<assign name="Set FirstName" property="context.TargetStudent.FirstName" value="context.SourceStudent.FirstName" action="set" xpos='335' ypos='900' />
<assign name="Set MiddleName" property="context.TargetStudent.MiddleName" value="context.SourceStudent.MiddleName" action="set" xpos='335' ypos='1000' />
<assign name="Set Grade" property="context.TargetStudent.Grade" value="context.SourceStudent.Grade" action="set" xpos='335' ypos='1100' />
<assign name="Set Email" property="context.TargetStudent.Email" value="context.SourceStudent.Email" action="set" xpos='335' ypos='1200' />
<assign name="Set Phone" property="context.TargetStudent.Phone" value="context.SourceStudent.Phone" action="set" xpos='335' ypos='1300' />
<assign name="Add TargetStudent to batch" property="context.StudentBatch.Students" value="context.TargetStudent" action="set" key="context.Key" xpos='335' ypos='1400' />
<assign name="Reset TargetStudent" property="context.TargetStudent" value="&quot;&quot;" action="set" xpos='335' ypos='1500' />
<assign name="Reset SourceStudent" property="context.SourceStudent" value="&quot;&quot;" action="set" xpos='335' ypos='1600' />
<assign name="Reset TempStudents" property="context.TempStudents" value="&quot;&quot;" action="set" xpos='335' ypos='1700' />
<assign name="UnSwizzle source student" property="status" value="request.Students.%UnSwizzleAt(context.Key)" action="set" xpos='335' ypos='1800' />
</true>
</if>
</foreach>
<call name='Send StudentBatch' target='@process.BatchOperation' async='0' xpos='200' ypos='650' >
<request type='Demo.ComplexMap.SemesterFixed.StudentBatch' >
<assign property="callrequest" value="context.StudentBatch" action="set" />
</request>
<response type='Ens.Response' />
</call>
</sequence>
</process>
]]></Data>
</XData>

<Parameter name="SETTINGS">
<Default>BatchOperation:Basic</Default>
</Parameter>

<Property name="BatchOperation">
<Type>Ens.DataType.ConfigName</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>StudentBatchProcessDefaultData</DefaultData>
<Data name="StudentBatchProcessDefaultData">
<Subscript>"StudentBatchProcess"</Subscript>
<Value name="1">
<Value>BatchOperation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.SemesterFixed.StudentMap">
<Super>EnsLib.RecordMap.ComplexMap</Super>
<TimeCreated>65460,79541.094426</TimeCreated>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<XData name="ComplexBatch">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<ComplexBatch xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.SemesterFixed.StudentMap" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.SemesterFixed.StudentBatch">
  <Header name="Semester" recordMap="Demo.ComplexMap.SemesterFixed.Semester"></Header>
  <RecordReference name="Students" required="0" repeating="1" minRepeats="1" recordMap="Demo.ComplexMap.SemesterFixed.Student"></RecordReference>
</ComplexBatch>
]]></Data>
</XData>

<Parameter name="BATCHCLASS">
<Default>Demo.ComplexMap.SemesterFixed.StudentBatch</Default>
</Parameter>

<Method name="PutBatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIOStream:%IO.DeviceStream,pBatch:EnsLib.RecordMap.ComplexBatch</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If '$IsObject($get(pBatch)) Set tStatus = $$$ERROR($$$ObjectInstanceRequired) Quit
		If '$IsObject(pIOStream) {
			Set tFilename = pIOStream
			Set pIOStream = ##class(%IO.FileStream).%New()
			Do pIOStream.Open(tFilename,"WAE",,"UTF-8",.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tStatus = ##class(Demo.ComplexMap.SemesterFixed.Semester).PutObject(pIOStream,pBatch.Semester,0)
		If $$$ISERR(tStatus) Quit
		For i=1:1:pBatch.Students.Count() {
			Set tElement = pBatch.Students.GetAt(i)
			If $IsObject(tElement) {
				Set tStatus = ##class(Demo.ComplexMap.SemesterFixed.Student).PutObject(pIOStream,tElement,0)
				If $$$ISERR(tStatus) Quit
			}
		}
		If $$$ISERR(tStatus) Quit
		Do pIOStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	} Catch ex {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetBatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIOStream:%IO.DeviceStream,pTimeout:%Numeric=-1,*pBatch:EnsLib.RecordMap.ComplexBatch</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If '$IsObject(pIOStream) {
			Set tFilename = pIOStream
			Set pIOStream = ##class(%IO.FileStream).%New()
			Do pIOStream.Open(tFilename,,pTimeout,"UTF-8",.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set pIOStream.CharEncoding = "UTF-8"
		Set pBatch = ##class(Demo.ComplexMap.SemesterFixed.StudentBatch).%New()
		Set pBatch.%Source = pIOStream.Name
		Set tStatus = ##class(Demo.ComplexMap.SemesterFixed.Semester).GetObject(pIOStream,.tHeader,pTimeout)
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexBasic,"Semester","Demo.ComplexMap.SemesterFixed.Semester",$classname()),tStatus) Quit
		Set pBatch.Semester = tHeader
		Set tLookAhead = ""
		If (4 > $length(tLookAhead)) {
			Set tLookAhead = pIOStream.Read(4-$length(tLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tCount = 0
		While ($extract(tLookAhead,1,4) = "STU|") {
			Set tStatus = ##class(Demo.ComplexMap.SemesterFixed.Student).GetObject(pIOStream,.tObject,pTimeout,.tLookAhead)
			Set tCount = tCount + 1
			If $$$ISERR(tStatus) Quit
			Set tStatus = pBatch.Students.SetAt(tObject,tCount)
			If $$$ISERR(tStatus) Quit
			Set tLookAhead = pIOStream.Read(4-$length(tLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexRepeating,"Students","Demo.ComplexMap.SemesterFixed.Student",$classname(),tCount),tStatus) Quit
		If (1 > tCount) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrRepeatMin,1,"Students")
			Quit
		}
	} Catch {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.SemesterProduction">
<Super>Ens.Production</Super>
<TimeCreated>65460,79530.671196</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="Demo.ComplexMap.SemesterProduction" LogGeneralTraceEvents="false">
  <Description>Sample Production to illustrate the use of Complex Maps. NOTE: The source file, ComplexMap_Semester_Data.txt, as well as sample output files, should be located in [install_dir]/dev/ComplexMap/.</Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="Semester_Data_FileService" Category="" ClassName="EnsLib.RecordMap.Service.ComplexBatchFileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="ComplexMap">Demo.ComplexMap.Semester.SemesterData</Setting>
    <Setting Target="Host" Name="TargetConfigNames">Semester_Data_Router</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\in\</Setting>
    <Setting Target="Adapter" Name="FileSpec">ComplexMap_Semester_Data*.txt</Setting>
    <Setting Target="Adapter" Name="Charset">UTF-8</Setting>
  </Item>
  <Item Name="Semester_Data_Router" Category="" ClassName="EnsLib.MsgRouter.RoutingEngine" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="Validation"></Setting>
    <Setting Target="Host" Name="BusinessRuleName">Demo.ComplexMap.Rule.SemesterBatchRouting</Setting>
  </Item>
  <Item Name="Semester_Data_FileOperation" Category="" ClassName="EnsLib.RecordMap.Operation.ComplexBatchFileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="ComplexMap">Demo.ComplexMap.Semester.SemesterData</Setting>
    <Setting Target="Host" Name="Filename">Semester_Data_Passthrough_%Q.txt</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\out\</Setting>
    <Setting Target="Adapter" Name="Charset">UTF-8</Setting>
  </Item>
  <Item Name="Semester_Summary_FileOperation" Category="" ClassName="EnsLib.RecordMap.Operation.ComplexBatchFileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="FilePath">C:\Practice\out\</Setting>
    <Setting Target="Host" Name="ComplexMap">Demo.ComplexMap.Summary.SemesterSummary</Setting>
    <Setting Target="Host" Name="Filename">Semester_Summary_%Q.txt</Setting>
    <Setting Target="Adapter" Name="Charset">UTF-8</Setting>
  </Item>
  <Item Name="Semester_FixedClassBatch_FileOperation" Category="" ClassName="EnsLib.RecordMap.Operation.ComplexBatchFileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="Write out fixed width batches containing classes." LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="ComplexMap">Demo.ComplexMap.SemesterFixed.ClassMap</Setting>
    <Setting Target="Host" Name="Filename">Semester_FixedClass_%Q.txt</Setting>
    <Setting Target="Adapter" Name="Charset">UTF-8</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\out\</Setting>
  </Item>
  <Item Name="Semester_FixedStudentBatch_FileOperation" Category="" ClassName="EnsLib.RecordMap.Operation.ComplexBatchFileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="Write out fixed width batches containing students." LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="ComplexMap">Demo.ComplexMap.SemesterFixed.StudentMap</Setting>
    <Setting Target="Host" Name="Filename">Semester_FixedStudent_%Q.txt</Setting>
    <Setting Target="Adapter" Name="Charset">UTF-8</Setting>
    <Setting Target="Adapter" Name="FilePath">c:\Practice\out\</Setting>
  </Item>
  <Item Name="Semester_FixedStudent_BatchCreator" Category="" ClassName="Demo.ComplexMap.SemesterFixed.StudentBatchProcess" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="BatchOperation">Semester_FixedStudentBatch_FileOperation</Setting>
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="Demo.ComplexMap.Summary.SemesterHeader.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ComplexMap.Summary.SemesterHeader'
on 2012-12-05 at 17:47:28.213 [2012-12-05 22:47:28.213 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexChild,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeCreated>65460,79545.728502</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="SemesterIDIdx">
<Properties>SemesterID</Properties>
</Index>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="SemesterID">
<Type>%Integer</Type>
</Property>

<Property name="Year">
<Type>%Integer</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="NumWeeks">
<Type>%Integer</Type>
</Property>

<Property name="NumberStudents">
<Type>%Integer</Type>
</Property>

<Property name="AverageGPA">
<Type>%Numeric</Type>
</Property>

<Trigger name="OnDelete">
<Code>	Set %ok = ##class(Demo.ComplexMap.Summary.SemesterHeader.Record).%OnDelete($$$oidForm({ID})) If $$$ISERR(%ok) Quit</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMap.Sum5E5C.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMap.Sum5E5C.RecordD</IdLocation>
<IndexLocation>^Demo.ComplexMap.Sum5E5C.RecordI</IndexLocation>
<StreamLocation>^Demo.ComplexMap.Sum5E5C.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SemesterID</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Name</Value>
</Value>
<Value name="5">
<Value>NumWeeks</Value>
</Value>
<Value name="6">
<Value>NumberStudents</Value>
</Value>
<Value name="7">
<Value>AverageGPA</Value>
</Value>
<Value name="8">
<Value>Year</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.Summary.SemesterHeader">
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeCreated>65460,79541.20887</TimeCreated>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.Summary.SemesterHeader" type="delimited" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.Summary.SemesterHeader.Record" complexBatchManaged="1" label="SES|" padFromLeft="0" recordTerminator="\x0d\x0a" allowEarlyTerminator="0">
  <Separators>
    <Separator>;</Separator>
  </Separators>
  <Field name="SemesterID" required="0" datatype="%Integer" index="1"></Field>
  <Field name="Year" required="0" datatype="%Integer"></Field>
  <Field name="Name" required="0" datatype="%String"></Field>
  <Field name="NumWeeks" required="0" datatype="%Integer"></Field>
  <Field name="NumberStudents" required="0" datatype="%Integer"></Field>
  <Field name="AverageGPA" required="0" datatype="%Numeric"></Field>
</Record>
]]></Data>
</XData>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.ComplexMap.Summary.SemesterHeader.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "SES|" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, "")
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tSeps = $listbuild($char(59))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.SemesterID =  pObject.SemesterIDDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Year =  pObject.YearDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Name = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.NumWeeks =  pObject.NumWeeksDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.NumberStudents =  pObject.NumberStudentsDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.AverageGPA =  pObject.AverageGPADisplayToLogical(tCurrString)
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write("SES|",,.tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Do pStream.Write($select(pHasTopFields: ##class(Demo.ComplexMap.Summary.SemesterHeader.Record).SemesterIDLogicalToDisplay(pObject.SemesterID), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.SemesterHeader.Record).YearLogicalToDisplay(pObject.Year), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.SemesterHeader.Record).NameLogicalToDisplay(pObject.Name), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.SemesterHeader.Record).NumWeeksLogicalToDisplay(pObject.NumWeeks), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.SemesterHeader.Record).NumberStudentsLogicalToDisplay(pObject.NumberStudents), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.SemesterHeader.Record).AverageGPALogicalToDisplay(pObject.AverageGPA), 1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.ComplexMap.Summary.SemesterHeader.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["SES|"
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.Summary.SemesterSummary">
<Super>EnsLib.RecordMap.ComplexMap</Super>
<TimeCreated>65460,79541.29367</TimeCreated>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Parameter name="BATCHCLASS">
<Default>Demo.ComplexMap.Summary.SummaryBatch</Default>
</Parameter>

<XData name="ComplexBatch">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<ComplexBatch xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.Summary.SemesterSummary" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.Summary.SummaryBatch">
  <Header name="Semester" recordMap="Demo.ComplexMap.Summary.SemesterHeader"></Header>
  <RecordSequence name="Students" required="1" repeating="1" minRepeats="1">
    <RecordReference name="Student" required="1" repeating="0" recordMap="Demo.ComplexMap.Summary.Student"></RecordReference>
    <RecordReference name="ClassInfo" required="1" repeating="1" minRepeats="1" recordMap="Demo.ComplexMap.Semester.ClassInfo"></RecordReference>
  </RecordSequence>
</ComplexBatch>
]]></Data>
</XData>

<Method name="PutBatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIOStream:%IO.DeviceStream,pBatch:EnsLib.RecordMap.ComplexBatch</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If '$IsObject($get(pBatch)) Set tStatus = $$$ERROR($$$ObjectInstanceRequired) Quit
		If '$IsObject(pIOStream) {
			Set tFilename = pIOStream
			Set pIOStream = ##class(%IO.FileStream).%New()
			Do pIOStream.Open(tFilename,"WAE",,"UTF-8",.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tStatus = ##class(Demo.ComplexMap.Summary.SemesterHeader).PutObject(pIOStream,pBatch.Semester,0)
		If $$$ISERR(tStatus) Quit
		For i=1:1:pBatch.Students.Count() {
			Set tElement = pBatch.Students.GetAt(i)
			If $IsObject(tElement) {
				Set tStatus = tElement.PutSequence(pIOStream)
				If $$$ISERR(tStatus) Quit
			}
		}
		If $$$ISERR(tStatus) Quit
		Do pIOStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	} Catch ex {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetBatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIOStream:%IO.DeviceStream,pTimeout:%Numeric=-1,*pBatch:EnsLib.RecordMap.ComplexBatch</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If '$IsObject(pIOStream) {
			Set tFilename = pIOStream
			Set pIOStream = ##class(%IO.FileStream).%New()
			Do pIOStream.Open(tFilename,,pTimeout,"UTF-8",.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set pIOStream.CharEncoding = "UTF-8"
		Set pBatch = ##class(Demo.ComplexMap.Summary.SummaryBatch).%New()
		Set pBatch.%Source = pIOStream.Name
		Set tStatus = ##class(Demo.ComplexMap.Summary.SemesterHeader).GetObject(pIOStream,.tHeader,pTimeout)
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexBasic,"Semester","Demo.ComplexMap.Summary.SemesterHeader",$classname()),tStatus) Quit
		Set pBatch.Semester = tHeader
		Set tLookAhead = ""
		If (4 > $length(tLookAhead)) {
			Set tLookAhead = tLookAhead _ pIOStream.Read(4-$length(tLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexBasic,"Students","Demo.ComplexMap.Summary.Students",$classname()),tStatus) Quit
		}
		Set tCount = 0
		While ($extract(tLookAhead,1,4)="STS|") {
			Set tStatus = ..getSeqStudents(pIOStream,.tSequence,.tLookAhead,pBatch,pTimeout)
			Set tCount = tCount + 1
			If $$$ISERR(tStatus) Quit
			Set tStatus = pBatch.Students.SetAt(tSequence,tCount)
			If $$$ISERR(tStatus) Quit
			If (4 > $length(tLookAhead)) {
				Set tLookAhead = tLookAhead _ pIOStream.Read(4-$length(tLookAhead),pTimeout,.tStatus)
				If $$$ISERR(tStatus) Quit
			}
		}
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexRepeating,"Students","Demo.ComplexMap.Summary.Students",$classname(),tCount),tStatus) Quit
		If (1 > tCount) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrRepeatMin,1,"Students")
			Quit
		}
	} Catch {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="getSeqStudents">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIOStream:%IO.DeviceStream,*pSequence:EnsLib.RecordMap.ComplexSequence,&pLookAhead:%String="",pBatch:EnsLib.RecordMap.ComplexBatch,pTimeout:%Numeric=-1]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		Set pSequence = ##class(Demo.ComplexMap.Summary.Students).%New()
		Set tStatus = ##class(Demo.ComplexMap.Summary.Student).GetObject(pIOStream,.tObject,pTimeout,.pLookAhead)
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexBasic,"Student","Demo.ComplexMap.Summary.Student",$classname()),tStatus) Quit
		Set pSequence.Student = tObject
		If (4 > $length(pLookAhead)) {
			Set pLookAhead = pIOStream.Read(4-$length(pLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tCount = 0
		While ($extract(pLookAhead,1,4) = "CLS|") {
			Set tStatus = ##class(Demo.ComplexMap.Semester.ClassInfo).GetObject(pIOStream,.tObject,pTimeout,.pLookAhead)
			Set tCount = tCount + 1
			If $$$ISERR(tStatus) Quit
			Set tStatus = pSequence.ClassInfo.SetAt(tObject,tCount)
			If $$$ISERR(tStatus) Quit
			Set pLookAhead = pIOStream.Read(4-$length(pLookAhead),pTimeout,.tStatus)
			If $$$ISERR(tStatus) Quit
		}
		If $$$ISERR(tStatus) Set tStatus = $system.Status.AppendStatus($$$ERROR($$$EnsRecordMapErrComplexRepeating,"ClassInfo","Demo.ComplexMap.Semester.ClassInfo",$classname(),tCount),tStatus) Quit
		If (1 > tCount) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrRepeatMin,1,"ClassInfo")
			Quit
		}
	}
	Catch {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.Summary.Student.Record.Name">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ComplexMap.Summary.Student'
on 2012-12-05 at 17:47:28.562 [2012-12-05 22:47:28.562 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeCreated>65460,79548.362591</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Property name="Family">
<Type>%String</Type>
</Property>

<Property name="Given">
<Type>%String</Type>
</Property>

<Property name="Middle">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Serial</Type>
<State>NameState</State>
<StreamLocation>^Demo.ComplexMap.SummaC2B6.NameS</StreamLocation>
<Data name="NameState">
<Value name="1">
<Value>Family</Value>
</Value>
<Value name="2">
<Value>Given</Value>
</Value>
<Value name="3">
<Value>Middle</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.Summary.Student.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ComplexMap.Summary.Student'
on 2012-12-05 at 17:47:28.581 [2012-12-05 22:47:28.581 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexChild,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeCreated>65460,79546.056134</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="StudentIDIdx">
<Properties>StudentID</Properties>
</Index>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="StudentID">
<Type>%Integer</Type>
</Property>

<Property name="Name">
<Type>Demo.ComplexMap.Summary.Student.Record.Name</Type>
</Property>

<Property name="Grade">
<Type>%Integer</Type>
</Property>

<Property name="Email">
<Type>%String</Type>
</Property>

<Property name="Phone">
<Type>%String</Type>
</Property>

<Property name="NumberClasses">
<Type>%Integer</Type>
</Property>

<Property name="GPA">
<Type>%Numeric</Type>
</Property>

<Trigger name="OnDelete">
<Code>	Set %ok = ##class(Demo.ComplexMap.Summary.Student.Record).%OnDelete($$$oidForm({ID})) If $$$ISERR(%ok) Quit</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMap.Sum86EC.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMap.Sum86EC.RecordD</IdLocation>
<IndexLocation>^Demo.ComplexMap.Sum86EC.RecordI</IndexLocation>
<StreamLocation>^Demo.ComplexMap.Sum86EC.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StudentID</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Grade</Value>
</Value>
<Value name="5">
<Value>Email</Value>
</Value>
<Value name="6">
<Value>Phone</Value>
</Value>
<Value name="7">
<Value>NumberClasses</Value>
</Value>
<Value name="8">
<Value>GPA</Value>
</Value>
<Value name="9">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.Summary.Student">
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeCreated>65460,79541.378305</TimeCreated>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ComplexMap.Summary.Student" type="delimited" char_encoding="UTF-8" targetClassname="Demo.ComplexMap.Summary.Student.Record" complexBatchManaged="1" label="STS|" padFromLeft="0" recordTerminator="\x0d\x0a" allowEarlyTerminator="0">
  <Separators>
    <Separator>;</Separator>
    <Separator>,</Separator>
  </Separators>
  <Field name="StudentID" required="0" datatype="%Integer" index="1"></Field>
  <Composite name="Name" required="0">
    <Field name="Name.Family" required="0" datatype="%String"></Field>
    <Field name="Name.Given" required="0" datatype="%String"></Field>
    <Field name="Name.Middle" required="0" datatype="%String"></Field>
  </Composite>
  <Field name="Grade" required="0" datatype="%Integer"></Field>
  <Field name="Email" required="0" datatype="%String"></Field>
  <Field name="Phone" required="0" datatype="%String"></Field>
  <Field name="NumberClasses" required="0" datatype="%Integer"></Field>
  <Field name="GPA" required="0" datatype="%Numeric"></Field>
</Record>
]]></Data>
</XData>

<Parameter name="OBJECTNAME">
<Default>Demo.ComplexMap.Summary.Student.Record</Default>
</Parameter>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "STS|" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, "")
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tSeps = $listbuild($char(59),$char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.StudentID =  pObject.StudentIDDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	Set tStrings(tStrings) = tCurrString
	Set tStrings(tStrings+1) = $piece(tStrings(tStrings), $char(44), 1)
	Set tStrings = tStrings + 1
	Set pObject.Name.Family = tStrings(tStrings)
	Set tStrings = tStrings - 1
	Set tStrings(tStrings+1) = $piece(tStrings(tStrings), $char(44), 2)
	Set tStrings = tStrings + 1
	Set pObject.Name.Given = tStrings(tStrings)
	Set tStrings = tStrings - 1
	Set tStrings(tStrings+1) = $piece(tStrings(tStrings), $char(44), 3)
	Set tStrings = tStrings + 1
	Set pObject.Name.Middle = tStrings(tStrings)
	Set tStrings = tStrings - 1
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Grade =  pObject.GradeDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Email = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.Phone = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.NumberClasses =  pObject.NumberClassesDisplayToLogical(tCurrString)
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(59), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(59), .tTopPiece)
	If pGetTopFields {
		Set pObject.GPA =  pObject.GPADisplayToLogical(tCurrString)
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write("STS|",,.tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Do pStream.Write($select(pHasTopFields: ##class(Demo.ComplexMap.Summary.Student.Record).StudentIDLogicalToDisplay(pObject.StudentID), 1: ""),0)
	Do pStream.Write($char(59),0)
	Do pStream.Write(##class(Demo.ComplexMap.Summary.Student.Record.Name).FamilyLogicalToDisplay(pObject.Name.Family),0)
	Do pStream.Write($char(44) _ ##class(Demo.ComplexMap.Summary.Student.Record.Name).GivenLogicalToDisplay(pObject.Name.Given),0)
	Do pStream.Write($char(44) _ ##class(Demo.ComplexMap.Summary.Student.Record.Name).MiddleLogicalToDisplay(pObject.Name.Middle),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.Student.Record).GradeLogicalToDisplay(pObject.Grade), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.Student.Record).EmailLogicalToDisplay(pObject.Email), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.Student.Record).PhoneLogicalToDisplay(pObject.Phone), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.Student.Record).NumberClassesLogicalToDisplay(pObject.NumberClasses), 1: ""),0)
	Do pStream.Write($char(59) _ $select(pHasTopFields: ##class(Demo.ComplexMap.Summary.Student.Record).GPALogicalToDisplay(pObject.GPA), 1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.ComplexMap.Summary.Student.Record")=""
	Set pClasses("Demo.ComplexMap.Summary.Student.Record.Name")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["STS|"
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>
</Class>


<Class name="Demo.ComplexMap.Summary.Students">
<Description>
RECORDMAP: Modified during compilation of Complex RecordMap 'Demo.ComplexMap.Summary.SemesterSummary'
on 2012-12-05 at 17:47:28.550 [2012-12-05 22:47:28.550 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexSequence,%XML.Adaptor</Super>
<TimeCreated>65460,79541.458295</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Property name="Student">
<Type>Demo.ComplexMap.Summary.Student.Record</Type>
<Required>1</Required>
</Property>

<Property name="ClassInfo">
<Type>Demo.ComplexMap.Semester.ClassInfo.Record</Type>
<Collection>array</Collection>
<Required>1</Required>
</Property>

<Method name="PutSequence">
<FormalSpec>pIOStream:%IO.DeviceStream</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		If $IsObject(..Student) {
			Set tStatus = ##class(Demo.ComplexMap.Summary.Student).PutObject(pIOStream,..Student,0)
			If $$$ISERR(tStatus) Quit
		}
		For i=1:1:..ClassInfo.Count() {
			Set tElement = ..ClassInfo.GetAt(i)
			If $IsObject(tElement) {
				Set tStatus = ##class(Demo.ComplexMap.Semester.ClassInfo).PutObject(pIOStream,tElement,0)
				If $$$ISERR(tStatus) Quit
			}
			Set tStatus = ..ClassInfo.%UnSwizzleAt(i)
			If $$$ISERR(tStatus) Quit
		}
		If $$$ISERR(tStatus) Quit
	}
	Catch {
		Set tStatus = $$$SystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Trigger name="OnDeleteTrigger">
<Code>	Set %ok = ##class(Demo.ComplexMap.Summary.Students).%OnDelete($$$oidForm({ID}))</Code>
<Event>DELETE</Event>
</Trigger>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMap.S46EE.StudentsD</DataLocation>
<DefaultData>StudentsDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMap.S46EE.StudentsD</IdLocation>
<IndexLocation>^Demo.ComplexMap.S46EE.StudentsI</IndexLocation>
<StreamLocation>^Demo.ComplexMap.S46EE.StudentsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ClassInfo">
<Attribute>ClassInfo</Attribute>
<Structure>subnode</Structure>
<Subscript>"ClassInfo"</Subscript>
</Data>
<Data name="StudentsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Student</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.Summary.SummaryBatch">
<Description>
RECORDMAP: Modified during compilation of Complex RecordMap 'Demo.ComplexMap.Summary.SemesterSummary'
on 2012-12-05 at 17:47:28.204 [2012-12-05 22:47:28.204 UTC]
by user DemoUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.RecordMap.ComplexBatch,Ens.Request</Super>
<TimeCreated>65460,79541.532733</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Property name="Semester">
<Type>Demo.ComplexMap.Summary.SemesterHeader.Record</Type>
<Required>1</Required>
</Property>

<Property name="Students">
<Type>Demo.ComplexMap.Summary.Students</Type>
<Collection>array</Collection>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ComplexMpSum.SummaryBatchD</DataLocation>
<DefaultData>SummaryBatchDefaultData</DefaultData>
<IdLocation>^Demo.ComplexMpSum.SummaryBatchD</IdLocation>
<IndexLocation>^Demo.ComplexMpSum.SummaryBatchI</IndexLocation>
<StreamLocation>^Demo.ComplexMpSum.SummaryBatchS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="Students">
<Attribute>Students</Attribute>
<Structure>subnode</Structure>
<Subscript>"Students"</Subscript>
</Data>
<Data name="SummaryBatchDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Semester</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.ComplexMap.Transform.CreateClassBatch">
<Super>Ens.DataTransformDTL</Super>
<TimeCreated>65460,79541.602526</TimeCreated>
<DependsOn>Demo.ComplexMap.Semester.Batch,Demo.ComplexMap.SemesterFixed.ClassBatch</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='Demo.ComplexMap.Semester.Batch' targetClass='Demo.ComplexMap.SemesterFixed.ClassBatch' create='new' language='objectscript' >
<subtransform class='Demo.ComplexMap.Transform.SemesterToFixedSemester' targetObj='target.Semester' sourceObj='source.Semester' >
<annotation>This simple transform is executed as a subtransform as we need to perform the same action in Demo.ComplexMap.Transform.CreateStudentBatch.</annotation>
</subtransform>
<foreach property='source.Students()' key='k1' >
<foreach property='source.Students.(k1).ClassInfo()' key='k2' >
<if condition='&apos;$data(classMap(source.Students.GetValueAt(k1).ClassInfo.GetValueAt(k2).ClassID,source.Students.GetValueAt(k1).ClassInfo.GetValueAt(k2).SectionID))' >
<true>
<assign value='source.Students.(k1).ClassInfo.(k2).ClassID' property='target.Classes.(k2).ClassID' action='set' />
<assign value='source.Students.(k1).ClassInfo.(k2).SectionID' property='target.Classes.(k2).SectionID' action='set' />
<assign value='source.Students.(k1).ClassInfo.(k2).Title' property='target.Classes.(k2).Title' action='set' />
<assign value='source.Students.(k1).ClassInfo.(k2).Grade' property='target.Classes.(k2).Grade' action='set' />
<assign value='1' property='classMap(source.Students.GetValueAt(k1).ClassInfo.GetValueAt(k2).ClassID,source.Students.GetValueAt(k1).ClassInfo.GetValueAt(k2).SectionID)' action='set' />
</true>
</if>
</foreach>
<code>
<![CDATA[ Set tSC = source.Students.%UnSwizzleAt(k1)
 If $$$ISERR(tSC) Quit
 Set tSC = target.Students.%UnSwizzleAt(k1)
 If $$$ISERR(tSC) Quit]]]]><![CDATA[></code>
</foreach>
</transform>
]]></Data>
</XData>
</Class>


<Class name="Demo.ComplexMap.Transform.SemesterBatchToFixedClassBatch">
<Super>Ens.DataTransformDTL</Super>
<TimeCreated>65460,79541.666255</TimeCreated>
<DependsOn>Demo.ComplexMap.Semester.Batch,Demo.ComplexMap.SemesterFixed.ClassBatch</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='Demo.ComplexMap.Semester.Batch' targetClass='Demo.ComplexMap.SemesterFixed.ClassBatch' create='new' language='objectscript' >
<subtransform class='Demo.ComplexMap.Transform.SemesterToFixedSemester' targetObj='target.Semester' sourceObj='source.Semester' >
<annotation>This simple transform is executed as a subtransform as we need to perform the same action in Demo.ComplexMap.Transform.CreateStudentBatch.</annotation>
</subtransform>
<assign value='0' property='Count' action='set' />
<foreach property='source.Students()' key='k1' >
<foreach property='source.Students.(k1).ClassInfo()' key='k2' >
<if condition='&apos;$data(classMap(source.Students.GetAt(k1).ClassInfo.GetAt(k2).ClassID,source.Students.GetAt(k1).ClassInfo.GetAt(k2).SectionID))' >
<true>
<assign value='Count + 1' property='Count' action='set' />
<assign value='source.Students.(k1).ClassInfo.(k2).ClassID' property='target.Classes.(Count).ClassID' action='set' />
<assign value='source.Students.(k1).ClassInfo.(k2).SectionID' property='target.Classes.(Count).SectionID' action='set' />
<assign value='source.Students.(k1).ClassInfo.(k2).Title' property='target.Classes.(Count).Title' action='set' />
<assign value='source.Students.(k1).ClassInfo.(k2).Grade' property='target.Classes.(Count).Grade' action='set' />
<assign value='1' property='target.Classes.(Count).StudentCount' action='set' />
<assign value='Count' property='classMap(source.Students.GetAt(k1).ClassInfo.GetAt(k2).ClassID,source.Students.GetAt(k1).ClassInfo.GetAt(k2).SectionID)' action='set' />
</true>
<false>
<assign value='classMap(source.Students.GetAt(k1).ClassInfo.GetAt(k2).ClassID,source.Students.GetAt(k1).ClassInfo.GetAt(k2).SectionID)' property='index' action='set' />
<assign value='target.Classes.(index).StudentCount + 1' property='target.Classes.(index).StudentCount' action='set' />
<assign value='target.Classes.(index).Grade + source.Students.(k1).ClassInfo.(k2).Grade' property='target.Classes.(index).Grade' action='set' />
</false>
</if>
</foreach>
<code>
<![CDATA[ Set tSC = source.Students.%UnSwizzleAt(k1)
 If $$$ISERR(tSC) Quit]]]]><![CDATA[></code>
</foreach>
<foreach property='target.Classes()' key='k3' >
<assign value='..Round(target.Classes.(k3).Grade / target.Classes.(k3).StudentCount,1)' property='target.Classes.(k3).Grade' action='set' >
<annotation>Compute average grade for each class.</annotation>
</assign>
</foreach>
</transform>
]]></Data>
</XData>
</Class>


<Class name="Demo.ComplexMap.Transform.SemesterBatchToFixedStudentBatch">
<Super>Ens.DataTransformDTL</Super>
<TimeCreated>65460,79541.729319</TimeCreated>
<DependsOn>Demo.ComplexMap.Semester.Batch,Demo.ComplexMap.SemesterFixed.StudentBatch</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='Demo.ComplexMap.Semester.Batch' targetClass='Demo.ComplexMap.SemesterFixed.StudentBatch' create='new' language='objectscript' >
<assign value='source.%Source' property='target.%Source' action='set' />
<subtransform class='Demo.ComplexMap.Transform.SemesterToFixedSemester' targetObj='target.Semester' sourceObj='source.Semester' />
<assign value='source.Students.Count()' property='target.Semester.RecordCount' action='set' />
<foreach property='source.Students()' key='k1' >
<assign value='source.Students.(k1).Student.StudentID' property='target.Students.(k1).StudentID' action='set' />
<assign value='source.Students.(k1).Student.LastName' property='target.Students.(k1).LastName' action='set' />
<assign value='source.Students.(k1).Student.FirstName' property='target.Students.(k1).FirstName' action='set' />
<assign value='source.Students.(k1).Student.MiddleName' property='target.Students.(k1).MiddleName' action='set' />
<assign value='source.Students.(k1).Student.Grade' property='target.Students.(k1).Grade' action='set' />
<assign value='source.Students.(k1).Student.Email' property='target.Students.(k1).Email' action='set' />
<assign value='source.Students.(k1).Student.Phone' property='target.Students.(k1).Phone' action='set' />
<code>
<![CDATA[ Set tSC = source.Students.%UnSwizzleAt(k1)
 If $$$ISERR(tSC) Quit
 Set tSC = target.Students.%UnSwizzleAt(k1)
 If $$$ISERR(tSC) Quit]]]]><![CDATA[></code>
</foreach>
</transform>
]]></Data>
</XData>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>
</Class>


<Class name="Demo.ComplexMap.Transform.SemesterBatchToSemesterSummaryBatch">
<Super>Ens.DataTransformDTL</Super>
<TimeCreated>65460,79541.794341</TimeCreated>
<DependsOn>Demo.ComplexMap.Semester.Batch,Demo.ComplexMap.Summary.SummaryBatch</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='Demo.ComplexMap.Semester.Batch' targetClass='Demo.ComplexMap.Summary.SummaryBatch' create='new' language='objectscript' >
<assign value='source.%Source' property='target.%Source' action='set' />
<assign value='source.Semester.SemesterID' property='target.Semester.SemesterID' action='set' />
<assign value='source.Semester.Year' property='target.Semester.Year' action='set' />
<assign value='source.Semester.Name' property='target.Semester.Name' action='set' />
<assign value='source.Semester.NumWeeks' property='target.Semester.NumWeeks' action='set' />
<assign value='0' property='totalClasses' action='set' >
<annotation>Counter for the total number of classes in the semester.</annotation>
</assign>
<assign value='0' property='totalStudents' action='set' />
<assign value='0' property='totalGPA' action='set' >
<annotation>Local variable to store the sum of the GPAs we see.</annotation>
</assign>
<foreach property='source.Students()' key='k1' >
<assign value='totalStudents + 1' property='totalStudents' action='set' />
<assign value='0' property='studentClasses' action='set' />
<assign value='0' property='studentGPA' action='set' />
<assign value='source.Students.(k1).Student.StudentID' property='target.Students.(k1).Student.StudentID' action='set' />
<assign value='source.Students.(k1).Student.LastName' property='target.Students.(k1).Student.Name.Family' action='set' />
<assign value='source.Students.(k1).Student.FirstName' property='target.Students.(k1).Student.Name.Given' action='set' />
<assign value='source.Students.(k1).Student.MiddleName' property='target.Students.(k1).Student.Name.Middle' action='set' />
<assign value='source.Students.(k1).Student.Grade' property='target.Students.(k1).Student.Grade' action='set' />
<assign value='source.Students.(k1).Student.Email' property='target.Students.(k1).Student.Email' action='set' />
<assign value='source.Students.(k1).Student.Phone' property='target.Students.(k1).Student.Phone' action='set' />
<foreach property='source.Students.(k1).ClassInfo()' key='k2' >
<assign value='source.Students.(k1).ClassInfo.(k2)' property='target.Students.(k1).ClassInfo.(k2)' action='set' />
<assign value='studentClasses + 1' property='studentClasses' action='set' />
<assign value='studentGPA + source.Students.(k1).ClassInfo.(k2).Grade' property='studentGPA' action='set' />
</foreach>
<assign value='studentClasses' property='target.Students.(k1).Student.NumberClasses' action='set' />
<assign value='..Round(studentGPA / studentClasses,1)' property='target.Students.(k1).Student.GPA' action='set' />
<assign value='totalClasses + studentClasses' property='totalClasses' action='set' />
<assign value='totalGPA + studentGPA' property='totalGPA' action='set' />
<code>
<annotation>Ensure that we don&#39;t keep unnecessary object references in memory</annotation>
<![CDATA[ Set tSC = source.Students.%UnSwizzleAt(k1)
 If $$$ISERR(tSC) Quit]]]]><![CDATA[></code>
</foreach>
<assign value='totalStudents' property='target.Semester.NumberStudents' action='set' />
<assign value='..Round(totalGPA / totalClasses,1)' property='target.Semester.AverageGPA' action='set' />
</transform>
]]></Data>
</XData>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>
</Class>


<Class name="Demo.ComplexMap.Transform.SemesterToFixedSemester">
<Super>Ens.DataTransformDTL</Super>
<TimeCreated>65460,79541.864395</TimeCreated>
<DependsOn>Demo.ComplexMap.Semester.SemesterHeader.Record,Demo.ComplexMap.SemesterFixed.Semester.Record</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='Demo.ComplexMap.Semester.SemesterHeader.Record' targetClass='Demo.ComplexMap.SemesterFixed.Semester.Record' create='new' language='objectscript' >
<assign value='source.%Source' property='target.%Source' action='set' />
<assign value='source.SemesterID' property='target.SemesterID' action='set' />
<assign value='source.Year' property='target.Year' action='set' />
<assign value='source.Name' property='target.Name' action='set' />
<assign value='source.NumWeeks' property='target.NumWeeks' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="Demo.ComplexMap.Transform.SummarizeSemesterBatch">
<Super>Ens.DataTransformDTL</Super>
<TimeCreated>65460,79541.929988</TimeCreated>
<DependsOn>Demo.ComplexMap.Semester.Batch,Demo.ComplexMap.Summary.SummaryBatch</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='Demo.ComplexMap.Semester.Batch' targetClass='Demo.ComplexMap.Summary.SummaryBatch' create='new' language='objectscript' >
<assign value='source.%Source' property='target.%Source' action='set' />
<assign value='source.Semester.SemesterID' property='target.Semester.SemesterID' action='set' />
<assign value='source.Semester.Year' property='target.Semester.Year' action='set' />
<assign value='source.Semester.Name' property='target.Semester.Name' action='set' />
<assign value='source.Semester.NumWeeks' property='target.Semester.NumWeeks' action='set' />
<assign value='0' property='totalClasses' action='set' >
<annotation>Counter for the total number of classes in the semester.</annotation>
</assign>
<assign value='0' property='totalStudents' action='set' />
<assign value='0' property='totalGPA' action='set' >
<annotation>Local variable to store the sum of the GPAs we see.</annotation>
</assign>
<foreach property='source.Students()' key='k1' >
<assign value='totalStudents + 1' property='totalStudents' action='set' />
<assign value='0' property='studentClasses' action='set' />
<assign value='0' property='studentGPA' action='set' />
<assign value='source.Students.(k1).Student.StudentID' property='target.Students.(k1).Student.StudentID' action='set' />
<assign value='source.Students.(k1).Student.LastName' property='target.Students.(k1).Student.Name.Family' action='set' />
<assign value='source.Students.(k1).Student.FirstName' property='target.Students.(k1).Student.Name.Given' action='set' />
<assign value='source.Students.(k1).Student.MiddleName' property='target.Students.(k1).Student.Name.Middle' action='set' />
<assign value='source.Students.(k1).Student.Grade' property='target.Students.(k1).Student.Grade' action='set' />
<assign value='source.Students.(k1).Student.Email' property='target.Students.(k1).Student.Email' action='set' />
<assign value='source.Students.(k1).Student.Phone' property='target.Students.(k1).Student.Phone' action='set' />
<foreach property='source.Students.(k1).ClassInfo()' key='k2' >
<assign value='source.Students.(k1).ClassInfo.(k2)' property='target.Students.(k1).ClassInfo.(k2)' action='set' />
<assign value='studentClasses + 1' property='studentClasses' action='set' />
<assign value='studentGPA + source.Students.(k1).ClassInfo.(k2).Grade' property='studentGPA' action='set' />
</foreach>
<assign value='studentClasses' property='target.Students.(k1).Student.NumberClasses' action='set' />
<assign value='..Round(studentGPA / studentClasses,1)' property='target.Students.(k1).Student.GPA' action='set' />
<assign value='totalClasses + studentClasses' property='totalClasses' action='set' />
<assign value='totalGPA + studentGPA' property='totalGPA' action='set' />
<code>
<annotation>Ensure that we don&#39;t keep unnecessary object references in memory</annotation>
<![CDATA[ Set tSC = source.Students.%UnSwizzleAt(k1)
 If $$$ISERR(tSC) Quit]]]]><![CDATA[></code>
</foreach>
<assign value='totalStudents' property='target.Semester.NumberStudents' action='set' />
<assign value='..Round(totalGPA / totalClasses,1)' property='target.Semester.AverageGPA' action='set' />
</transform>
]]></Data>
</XData>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>
</Class>


</Export>
